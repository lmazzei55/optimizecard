// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Credit card app specific fields
  rewardPreference String @default("cashback") // "cashback" or "points" or "best_overall"
  pointValue       Float  @default(0.01) // How much user values 1 point in dollars
  enableSubCategories Boolean @default(false) // Whether user wants to use subcategories
  spendingData     String? // JSON string of spending data for persistence
  
  // Freemium subscription fields
  subscriptionTier String @default("free") // "free" or "premium"
  subscriptionStatus String @default("active") // "active", "canceled", "past_due"
  subscriptionId String? // Stripe subscription ID
  customerId String? // Stripe customer ID
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?
  trialEndDate DateTime?
  
  // Relationships
  spendingCategories UserSpendingCategory[]
  spendingSubCategories UserSpendingSubCategory[]
  ownedCards        UserCard[]
  benefitValuations UserBenefitValuation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreditCard {
  id          String @id @default(cuid())
  name        String
  issuer      String
  annualFee   Float
  applicationUrl String? // URL for "Apply Now" button
  
  // Freemium tier (based on annual fee)
  tier        String @default("free") // "free" (no annual fee) or "premium" (has annual fee)
  
  // Reward structure
  baseReward     Float // Base reward rate (e.g., 1% = 0.01)
  rewardType     String // "cashback" or "points"
  pointValue     Float? // Value of 1 point in dollars (for points cards)
  
  // Category bonuses
  categoryRewards CategoryReward[]
  
  // Card benefits and perks
  benefits       CardBenefit[]
  
  // Additional features
  signupBonus    Float?
  signupSpend    Float? // Minimum spend to get signup bonus
  signupTimeframe Int? // Months to complete signup spend
  
  isActive Boolean @default(true)
  
  // Relationships
  userCards UserCard[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpendingCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  
  // Relationships
  userSpending    UserSpendingCategory[]
  categoryRewards CategoryReward[]
  subCategories   SubCategory[]
  
  createdAt DateTime @default(now())
}

model SubCategory {
  id          String @id @default(cuid())
  name        String
  description String?
  parentCategoryId String
  
  // Relationships
  parentCategory SpendingCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  userSpending   UserSpendingSubCategory[]
  categoryRewards CategoryReward[]
  
  createdAt DateTime @default(now())
  
  @@unique([parentCategoryId, name])
}

model CategoryReward {
  id         String @id @default(cuid())
  cardId     String
  categoryId String?     // Can be null if subcategoryId is set
  subCategoryId String?  // Can be null if categoryId is set
  rewardRate Float // Multiplier (e.g., 3x = 3.0)
  
  // Optional constraints
  maxReward  Float? // Maximum reward per period
  period     String? // "monthly", "quarterly", "yearly"
  
  card        CreditCard      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  category    SpendingCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory SubCategory?     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  
  @@unique([cardId, categoryId, subCategoryId])
}

model CardBenefit {
  id          String @id @default(cuid())
  cardId      String
  name        String // e.g., "Travel Credit", "Priority Pass"
  description String // Detailed description
  annualValue Float  // Official annual value in dollars
  category    String // e.g., "travel", "dining", "entertainment", "insurance"
  isRecurring Boolean @default(true) // True for annual benefits, false for one-time
  
  card CreditCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userBenefitValuations UserBenefitValuation[]
  
  createdAt DateTime @default(now())
  
  @@unique([cardId, name])
}

model UserSpendingCategory {
  id         String @id @default(cuid())
  userId     String
  categoryId String
  monthlySpend Float
  
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category SpendingCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([userId, categoryId])
}

model UserSpendingSubCategory {
  id           String @id @default(cuid())
  userId       String
  subCategoryId String
  monthlySpend Float
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  
  @@unique([userId, subCategoryId])
}

model UserBenefitValuation {
  id        String @id @default(cuid())
  userId    String
  benefitId String
  personalValue Float // How much the user personally values this benefit annually
  
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  benefit CardBenefit @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  
  @@unique([userId, benefitId])
}

model UserCard {
  id     String @id @default(cuid())
  userId String
  cardId String
  
  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  card CreditCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  addedAt DateTime @default(now())
  
  @@unique([userId, cardId])
}
